{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "东师",
  "home_page_url": "https://jia-123.github.io/",
  "feed_url": "https://jia-123.github.io/feed.json",
  "description": "brief jia",
  "author": {
    "name": "jia-123"
  },
  "items": [
    {
      "title": "Git介绍",
      "url": "https://jia-123.github.io/Git/",
      "id": "https://jia-123.github.io/Git/",
      "content_html": "<h1 id=\"git介绍\"> Git介绍</h1>\n<p>版本控制系统</p>\n<p>本地版本控制系统-&gt;集中化的版本控制系统-&gt;分布式的版本控制系统(Git是分布式的版本控制系统)</p>\n<h1 id=\"git仓库\"> Git仓库</h1>\n<p>英文名<strong>repository</strong>，您可以简单理解成一个目录，这个目录里面的所有文件都可以被 Git 管理起来，每个文件的修改、删除， Git 都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p>\n<h2 id=\"初始化仓库\"> 初始化仓库</h2>\n<p>首先，选择一个合适的地方，创建一个空目录。</p>\n<div><pre><code><span># open shell (PowerShell on Windows) in a proper directory</span>\n$ mkdir learngit\n$ cd learngit\n$ pwd\n/users/hope-studio/learngit\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p><code>pwd</code> 命令用于显示当前目录。</p>\n<p>第二步，通过 <code>git init</code> 命令把这个目录变成 Git 可以管理的仓库:</p>\n<div><pre><code>$ git init\nInitialized empty Git repository in /users/hope-studio/learngit/.git/\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>瞬间 Git 就把仓库建好了，而且告诉您是一个空的仓库(empty Git repository)，可以发现当前目录下多了一个.git 的目录，这个目录是 Git 来跟踪管理仓库的，如果这个目录里面的文件破坏了，Git 仓库也破坏了。</p>\n<h2 id=\"把文件添加到仓库\"> 把文件添加到仓库</h2>\n<p>首先这里再明确一下，所有的版本控制系统，其实只能跟踪<strong>文本文件</strong>的改动，比如 TXT 文件，网页，所有的程序代码等等，Git 也不例外。 所以要使用版本控制系统，就要以纯文本方式编写文件。</p>\n<p>强烈建议使用标准的 UTF-8 编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。</p>\n<p>现在编写一个 readme.txt 文件，内容如下:</p>\n<div><pre><code>Git is a version control system.\nGit is free software.\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>一定要放到 <code>learngit</code> 目录下(子目录也行)，因为这是一个 Git 仓库，放到其他地方 Git 再厉害也找不到这个文件。</p>\n<p>把一个文件放到 Git 仓库只需要两步:</p>\n<p>1.用命令 <code>git add</code> 告诉 Git，把文件添加到仓库:</p>\n<div><pre><code><span>git</span> <span>add</span> readme.txt\n</code></pre>\n<div><span>1</span><br></div></div><p>执行上面的命令，没有任何显示，这就对了，Unix 的哲学是“没有消息就是好消息”，说明添加成功。</p>\n<p>2.用命令 <code>git commit</code> 告诉 Git，把文件提交到仓库:</p>\n<div><pre><code>$ <span>git</span> commit -m <span>\"wrote a readme file\"</span>\n<span>[</span>master <span>(</span>root-commit<span>)</span> eaadf4e<span>]</span> wrote a readme <span>file</span>\n <span>1</span> <span>file</span> changed, <span>2</span> insertions<span>(</span>+<span>)</span>\n create mode <span>100644</span> readme.txt\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p><code>git commit</code> 命令，<code>-m</code> 后面输入的是本次提交的说明，这样您就能从历史记录里方便地找到改动记录。</p>\n<h2 id=\"小结\"> 小结</h2>\n<ul>\n<li>初始化一个 Git 仓库，使用 <code>git init</code> 命令。</li>\n<li>添加文件到 Git 仓库，分两步:\n<ol>\n<li>使用命令 <code>git add &lt;file&gt;</code>，可反复多次使用，添加多个文件；</li>\n<li>使用命令 <code>git commit -m &lt;message&gt;</code>，完成。</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"纵向查看\"> 纵向查看</h1>\n<p>我们已经添加并提交了一个readme.txt文件，继续修改此文件，改成如下内容：</p>\n<div><pre><code>Git is a distributed version control system.\nGit is free software.\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>现在，运行 <code>git status</code> 命令看看结果:</p>\n<div><pre><code>$ git status\nOn branch master\nChanges not staged for commit:\n  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)\n  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)\n\n    modified:   readme.txt\n\nno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p><code>git status</code> 命令可以输出仓库当前的状态，上面的命令输出告诉我们，readme.txt 被修改过了，但还没有准备提交的修改。</p>\n<p>简洁的输出：</p>\n<p><code>git status</code> 命令的输出十分详细，但其用语有些繁琐。Git 有一个选项可以帮您缩短状态命令的输出，这样可以以简洁的方式查看更改。如果您使用 <code>git status -s</code> 命令或 <code>git status --short</code> 命令，您将得到一种格式更为紧凑的输出。</p>\n<p>输出中有两栏，左栏指明了暂存区的状态，右栏指明了工作区的状态。</p>\n<p>Git 现在只告诉我们 readme.txt 被修改了，我们用 <code>git diff</code> 这个命令能看看具体修改了什么内容:</p>\n<p>知道了对 readme.txt 作了什么修改后，再把它提交到仓库就放心多了，提交修改和提交新文件是一样的两步，第一步是 <code>git add</code>:</p>\n<p>同样没有任何输出。在执行第二步 <code>git commit</code> 之前，我们再运行 <code>git status</code> 看看当前仓库的状态:</p>\n<p><code>git status</code> 告诉我们，将要被提交的修改包括 readme.txt，下一步，就可以放心地提交了:</p>\n<p>提交后，我们再用 <code>git status</code> 命令看看仓库的当前状态:</p>\n<p>Git 告诉我们当前没有需要提交的修改，而且，工作目录是干净(working tree clean)的。</p>\n<h2 id=\"小结-2\"> 小结</h2>\n<ul>\n<li>要随时掌握工作区的状态，使用 <code>git status</code> 命令。</li>\n<li>如果 <code>git status</code> 告诉您有文件被修改过，用 <code>git diff</code> 可以查看修改内容。</li>\n</ul>\n<h1 id=\"撤销操作\"> 撤销操作</h1>\n<p>有些撤消操作是不可逆的。这是在使用 Git 的过程中，会因为操作失误而导致之前的工作丢失的少有的几个 地方之一。</p>\n<p>有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。此时，可以运行带有 <code>--amend</code> 选 项的提交命令来重新提交:</p>\n<div><pre><code>git commit --amend\n</code></pre>\n<div><span>1</span><br></div></div><p>这个命令会将暂存区中的文件提交。如果自上次提交以来您还未做任何修改(例如，在上次提交后马上执行了 此命令)， 那么快照会保持不变，而您所修改的只是提交信息。</p>\n<p>文本编辑器启动后，可以看到之前的提交信息。编辑后保存会覆盖原来的提交信息。</p>\n<p>例如，您提交后发现忘记了暂存某些需要的修改，可以像下面这样操作:</p>\n<div><pre><code>git commit -m &#39;initial commit&#39;\ngit add forgotten_file\ngit commit --amend\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>最终您只会有一个提交——第二次提交将代替第一次提交的结果。</p>\n<h1 id=\"版本回退\"> 版本回退</h1>\n<p>修改 readme.txt 文件如下:</p>\n<div><pre><code>Git is a distributed version control system.\nGit is free software distributed under the GPL.\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>然后尝试提交:</p>\n<div><pre><code>$ git add readme.txt\n# nothing displayed\n$ git commit -m &quot;append GPL&quot;\n[master 1094adb] append GPL\n 1 file changed, 1 insertion(+), 1 deletion(-)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id=\"查看版本信息\"> 查看版本信息</h2>\n<p>版本控制系统用 <code>git log</code> 命令可以告诉我们历史记录，在 Git 中，我们查看:</p>\n<p><code>git log</code> 命令显示从最近到最远的提交日志</p>\n<p>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上 <code>--pretty=oneline</code> 参数:</p>\n<h2 id=\"回退版本\"> 回退版本</h2>\n<p>如果要把版本回退到上一个版本，也就是 <code>add distributed</code> 的那个版本，怎么做呢?</p>\n<p>首先，Git 必须知道当前版本是哪个版本，在 Git 中，用 <code>HEAD</code> 表示当前版本，也就是最新的提交 <code>1094adb...</code> (注意我的提交 ID 和您的肯定不一样)，上一个版本就是 <code>HEAD^</code>，上上一个版本就是 <code>HEAD^^</code>，当然往上 100 个版本写 100 个 <code>^</code> 比较容易数不过来，所以写成 <code>HEAD~100</code>。</p>\n<p>现在，要把当前版本 <code>append GPL</code> 回退到上一个版本 <code>add distributed</code>，就可以使用 <code>git reset</code> 命令:</p>\n<div><pre><code>$ git reset --hard HEAD^\nHEAD is now at e475afc add distributed\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>看看 readme.txt 的内容是不是版本 add distributed:</p>\n<div><pre><code>$ cat readme.txt\nGit is a distributed version control system.\nGit is free software.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>果然被还原了。</p>\n<p>最新的那个版本 append GPL 已经看不到了! 肿么办?</p>\n<p>办法其实还是有的，只要上面的命令行窗口还没有被关掉，您就可以顺着往上找啊找啊，找到那个 append GPL 的 commit id 是 1094adb...，于是就可以指定回到未来的某个版本:</p>\n<div><pre><code>$ <span>git</span> reset --hard 1094a\nHEAD is now at 83b0afe append GPL\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>版本号没必要写全，前几位就可以了，Git 会自动去找。当然也不能只写前一两位，因为 Git 可能会找到多个版本号，就无法确定是哪一个了。</p>\n<h2 id=\"找回commit-id\"> 找回commit id</h2>\n<p>如果回退到了某个版本找不到新版本的 <code>commit id</code>，在 Git 中，就无法用 <code>$ git reset --hard HEAD^</code> 回退。</p>\n<p>所以 Git 提供了一个命令 <code>git reflog</code> 用来记录您的每一次命令:</p>\n<h2 id=\"小结-3\"> 小结</h2>\n<ul>\n<li><code>HEAD</code> 指向的版本就是当前版本，因此，Git 允许我们在版本的历史之间穿梭，使用命令 <code>git reset --hard commit_id</code>。</li>\n<li>用 <code>git log</code> 可以查看提交历史，以便确定要回退到哪个版本。</li>\n<li>用 <code>git reflog</code> 查看命令历史，以便确定要回到未来的哪个版本。</li>\n</ul>\n<h1 id=\"工作区和暂存区\"> 工作区和暂存区</h1>\n<p>Git 和其他版本控制系统如 SVN 的一个不同之处就是有暂存区的概念。</p>\n<h2 id=\"工作区\"> 工作区</h2>\n<p>就是您在电脑里能看到的目录，比如 learngit 文件夹就是一个工作区:</p>\n<h2 id=\"版本库\"> 版本库</h2>\n<p>工作区有一个隐藏目录.git，这个不算工作区，而是 Git 的版本库。</p>\n<p>Git 的版本库里存了很多东西，其中最重要的就是称为 stage(或者叫 index)的暂存区，还有 Git 为我们自动创建的第一个分支 <code>master</code>，以及指向 master 的一个指针叫 <code>HEAD</code>。</p>\n\n<p>前面讲了我们把文件往 Git 版本库里添加的时候，提交更改，实际上就是把暂存区的所有内容提交到当前分支。我们创建 Git 版本库时，Git 自动为我们创建了唯一一个 <code>master</code> 分支，所以，现在，<code>git commit</code> 就是往 master 分支上提交更改。</p>\n<p>您可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p>\n<h1 id=\"修改管理\"> 修改管理</h1>\n<h2 id=\"管理修改\"> 管理修改</h2>\n<p>Git 比其他版本控制系统设计得优秀，因为 Git 跟踪并管理的是修改，而非文件。</p>\n<p>您会问，什么是修改? 比如您新增了一行，这就是一个修改，删除了一行，也是一个修改，更改了某些字符，也是一个修改，删了一些又加了一些，也是一个修改，甚至创建一个新文件，也算一个修改。</p>\n<p>用 <code>git diff HEAD -- readme.txt</code> 命令可以查看工作区和版本库里面最新版本的区别:</p>\n<h3 id=\"管理小结\"> 管理小结</h3>\n<p>现在，您又理解了 Git 是如何跟踪修改的，每次修改，如果不用 <code>git add</code> 到暂存区，那就不会加入到 <code>commit</code> 中。</p>\n<h2 id=\"撤销对文件的修改\"> 撤销对文件的修改</h2>\n<p><code>git checkout -- &lt;file&gt;</code> 可以丢弃工作区的修改:</p>\n<div><pre><code><span>git</span> checkout -- readme.txt\n</code></pre>\n<div><span>1</span><br></div></div><p>命令 <code>git checkout -- readme.txt</code> 意思就是，把 readme.txt 文件在工作区的修改全部撤销，这里有两种情况:</p>\n<p>一种是 readme.txt 自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>\n<p>一种是 readme.txt 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>\n<p>总之，就是让这个文件回到最近一次 <code>git commit</code> 或 <code>git add</code> 时的状态。</p>\n<p><code>git checkout -- file</code> 命令中的 <code>--</code> 很重要，没有 <code>--</code>，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到 <code>git checkout</code> 命令。</p>\n<h2 id=\"取消暂存的文件\"> 取消暂存的文件</h2>\n<p>用命令 <code>git reset HEAD &lt;file&gt;</code> 可以把暂存区的修改撤销掉(unstage)，重新放回工作区:</p>\n<p><code>git reset</code> 命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用 <code>HEAD</code> 时，表示当前的指针(最新的版本)。</p>\n<p>再用 <code>git status</code> 查看一下，现在暂存区是干净的，工作区有修改:</p>\n<p>还记得如何丢弃工作区的修改吗?</p>\n<div><pre><code><span>git</span> checkout -- readme.txt\n\n$ <span>git</span> status\nOn branch master\nnothing to commit, working tree clean\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>整个世界终于清静了!</p>\n<p>那么如果您想要丢弃工作区和暂存区全部更改呢? 不要忘了 <code>HEAD</code> 就是当前指针，所以</p>\n<div><pre><code><span>git</span> reset --hard HEAD\n</code></pre>\n<div><span>1</span><br></div></div><p>就是丢弃工作区与暂存区的全部文件啦。</p>\n<h3 id=\"撤销小结\"> 撤销小结</h3>\n<p>场景 1: 当您改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 <code>git checkout -- file</code>。</p>\n<p>场景 2: 当您不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令 <code>git reset HEAD &lt;file&gt;</code>，就回到了场景 1，第二步按场景 1 操作。</p>\n<p>场景 3: 已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p>\n<h2 id=\"删除文件\"> 删除文件</h2>\n<h3 id=\"如何删除文件\"> 如何删除文件</h3>\n<p>在 Git 中，删除也是一个修改操作。我们实战一下，先添加一个新文件 test.txt 到 Git 并且提交:</p>\n<p>一般情况下，您通常直接在文件管理器中把没用的文件删了，或者用 <code>rm</code> 命令删了:</p>\n<div><pre><code><span>rm</span> test.txt\n</code></pre>\n<div><span>1</span><br></div></div><p>这个时候，Git 知道您删除了文件，因此，工作区和版本库就不一致了，<code>git status</code> 命令会立刻告诉您哪些文件被删除了:</p>\n<div><pre><code>$ git status\nOn branch master\nChanges not staged for commit:\n  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)\n  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)\n\n    deleted:    test.txt\n\nno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>现在您有两个选择，一是确实要从版本库中删除该文件，那就用命令 <code>git rm</code> 删掉，并且 <code>git commit</code>:</p>\n<div><pre><code>$ <span>git</span> <span>rm</span> test.txt\n<span>rm</span> <span>'test.txt'</span>\n\n$ <span>git</span> commit -m <span>\"remove test.txt\"</span>\n<span>[</span>master d46f35e<span>]</span> remove test.txt\n <span>1</span> <span>file</span> changed, <span>1</span> deletion<span>(</span>-<span>)</span>\n delete mode <span>100644</span> test.txt\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>现在，文件就从版本库中被删除了。</p>\n<h3 id=\"撤销删除\"> 撤销删除</h3>\n<p>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本:</p>\n<div><pre><code><span>git</span> checkout -- test.txt\n</code></pre>\n<div><span>1</span><br></div></div><p><code>git checkout</code> 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p>\n<h3 id=\"删除小结\"> 删除小结</h3>\n<p>命令 <code>git rm</code> 用于删除一个文件。如果一个文件已经被提交到版本库，那么您永远不用担心误删，但是要小心，您只能恢复文件到最新版本，您会丢失最近一次提交后您修改的内容。</p>\n<h1 id=\"远程仓库\"> 远程仓库</h1>\n<h2 id=\"什么是远程仓库\"> 什么是远程仓库</h2>\n<p>最后友情提示，在 GitHub 上免费托管的 Git 仓库，任何人都可以看到喔(但只有您自己才能改)。所以，不要把敏感信息放进去。</p>\n<h2 id=\"添加远程库\"> 添加远程库</h2>\n<p>配置公钥，让计算机和远程库能够联系。</p>\n<p>首先，登陆 GitHub，然后，在右上角找到 “+” 按钮，点击 &quot;New Repository&quot;。</p>\n<p>填写项目名称，其他的选项可默认。点击“创建”按钮。</p>\n<p>目前，在 GitHub 上的这个 learngit 仓库还是空的，GitHub 告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到 GitHub 仓库。</p>\n<p>现在，我们根据 GitHub 的提示，在本地的 learngit 仓库下运行命令:</p>\n<div><pre><code><span>git</span> remote <span>add</span> origin git@github.com:Hope-Studio/learngit.git\n</code></pre>\n<div><span>1</span><br></div></div><p>添加后，远程库的名字就是 <code>origin</code>，这是 Git 默认的叫法，也可以改成别的。</p>\n<p>下一步，就可以把本地库的所有内容推送到远程库上:</p>\n<div><pre><code>$ git push -u origin master\nCounting objects: 20, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (15/15), done.\nWriting objects: 100% (20/20), 1.64 KiB | 560.00 KiB/s, done.\nTotal 20 (delta 5), reused 0 (delta 0)\nremote: Resolving deltas: 100% (5/5), done.\nTo github.com:Hope-Studio/learngit.git\n * [new branch]      master -&gt; master\nBranch &#39;master&#39; set up to track remote branch &#39;master&#39; from &#39;origin&#39;.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>把本地库的内容推送到远程，用 <code>git push</code> 命令，实际上是把当前分支 <code>master</code> 推送到远程。</p>\n<p>由于远程库是空的，我们第一次推送 <code>master</code> 分支时，加上了 <code>-u</code> 参数，Git 不但会把本地的 <code>master</code> 分支内容推送的远程新的 <code>master</code> 分支，还会把本地的 <code>master</code> 分支和远程的 <code>master</code> 分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>\n<p>推送成功后，可以立刻在 GitHub 页面中看到远程库的内容已经和本地一模一样:</p>\n<p>从现在起，只要本地作了提交，就可以通过命令:</p>\n<div><pre><code><span>git</span> push origin master\n</code></pre>\n<div><span>1</span><br></div></div><p>把本地 <code>master</code> 分支的最新修改推送至 GitHub，现在，您就拥有了真正的分布式版本库!</p>\n<h2 id=\"shh警告\"> SHH警告</h2>\n<p>第一次连接时会有一个警告，之后就没有了。</p>\n<h3 id=\"关联小结\"> 关联小结</h3>\n<p>要关联一个远程库，使用命令 <code>git remote add origin git@&lt;server-name&gt;:&lt;path&gt;/&lt;repo-name&gt;.git</code>；</p>\n<p>关联后，使用命令 <code>git push -u origin master</code> 第一次推送 master 分支的所有内容；</p>\n<p>此后，每次本地提交后，只要有必要，就可以使用命令 <code>git push origin master</code> 推送最新修改；</p>\n<p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而 SVN 在没有联网的时候是拒绝干活的! 当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了!</p>\n<h2 id=\"从远程库克隆\"> 从远程库克隆</h2>\n<p>上次我们讲了先有本地库，后有远程库的时候，如何关联远程库。</p>\n<p>现在，假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。</p>\n<p>首先，登陆 GitHub，创建一个新的仓库，名字叫 <code>gitskills</code>:</p>\n<p>我们勾选使用 “readme 初始化项目”，这样 GitHub 会自动为我们创建一个 README.md 文件。创建完毕后，可以看到 README.md 文件。</p>\n<p>现在，远程库已经准备好了，下一步是用命令 <code>git clone</code> 克隆一个本地库:</p>\n<div><pre><code>$ git clone git@github.com:Hope-Studio/gitskills.git\nCloning into &#39;gitskills&#39;...\nremote: Counting objects: 3, done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 3\nReceiving objects: 100% (3/3), done.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>注意把 Git 库的地址换成您自己的，然后进入 <code>gitskills</code> 目录看看，已经有 README.md 文件了:</p>\n<div><pre><code>$ <span>cd</span> gitskills\n$ <span>ls</span>\nREADME.md\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。</p>\n<h3 id=\"克隆小结\"> 克隆小结</h3>\n<p>要克隆一个仓库，首先必须知道仓库的地址，然后使用 <code>git clone</code> 命令克隆。</p>\n<p>Git 支持多种协议，包括 https，但通过 ssh 支持的原生 git 协议速度最快。</p>\n<h2 id=\"从远程仓库中抓取\"> 从远程仓库中抓取</h2>\n<p>从远程仓库中获得数据，可以执行:</p>\n<div><pre><code><span>git</span> fetch <span>&lt;</span>remote<span>></span>\n</code></pre>\n<div><span>1</span><br></div></div><p>这个命令会访问远程仓库，从中拉取所有您还没有的数据。执行完成后，您将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。</p>\n<p><code>git fetch origin</code> 会抓取克隆(或上一次抓取)后新推送的所有工作。必须注意 <code>git fetch</code> 命令只会将数据下载到您的本地仓库——它并不会自动合并或修改您当前的工作。当准备好时您必须手动将其合并入您的工作。</p>\n<h2 id=\"推送到远程仓库\"> 推送到远程仓库</h2>\n<p>当您想分享您的项目时，必须将其推送到上游。这个命令很简单: <code>git push &lt;remote&gt; &lt;branch&gt;</code>。当您 想要将 master 分支推送到 origin 服务器时(再次说明，克隆时通常会自动帮您设置好那两个名字)， 那么 运行这个命令就可以将您所做的备份到服务器:</p>\n<div><pre><code><span>git</span> push origin master\n</code></pre>\n<div><span>1</span><br></div></div><p>只有当您有所克隆服务器的写入权限，并且之前没有人推送过时，这条命令才能生效。当您和其他人在同一时间克隆，他们先推送到上游然后您再推送到上游，您的推送就会毫无疑问地被拒绝。您必须先抓取他们的工作并将其合并进您的工作后才能推送。</p>\n<h2 id=\"查看某个远程仓库\"> 查看某个远程仓库</h2>\n<p>如果想要查看某一个远程仓库的更多信息，可以使用 <code>git remote show &lt;remote&gt;</code> 命令。如果想以一个特 定的缩写名运行这个命令，例如 origin，会得到像下面类似的信息:</p>\n<div><pre><code>$ <span>git</span> remote show origin\n* remote origin\nFetch URL: https://github.com/schacon/ticgit\nPush URL: https://github.com/schacon/ticgit\nHEAD branch: master\nRemote branches:\nmaster tracked\ndev-branch tracked\nLocal branch configured <span>for</span> <span>'git pull'</span><span>:</span>\nmaster merges with remote master\nLocal ref configured <span>for</span> <span>'git push'</span><span>:</span>\nmaster pushes to master <span>(</span>up to <span>date</span><span>)</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>它同样会列出远程仓库的 URL 与跟踪分支的信息。这些信息非常有用，它告诉您正处于 master 分支，并且如果运行 <code>git pull</code>，就会抓取所有的远程引用，然后将远程 master 分支合并到本地 master 分支。它也会列出拉取到的所有远程引用。</p>\n<h2 id=\"远程仓库的重命名与移除\"> 远程仓库的重命名与移除</h2>\n<p>您可以运行 <code>git remote rename</code> 来修改一个远程仓库的简写名。例如，想要将 pb 重命名为 paul，可以用 <code>git remote rename</code> 这样做:</p>\n<div><pre><code>$ <span>git</span> remote <span>rename</span> pb paul\n$ <span>git</span> remote\norigin\npaul\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>值得注意的是这同样也会修改您所有远程跟踪的分支名字。那些过去引用 <code>pb/master</code> 的现在会引用 <code>paul/master</code>。</p>\n<p>如果因为一些原因想要移除一个远程仓库——您已经从服务器上搬走了或不再想使用某一个特定的镜像了，又或者某一个贡献者不再贡献了——可以使用 <code>git remote remove</code> 或 <code>git remote rm</code>:</p>\n<div><pre><code>$ <span>git</span> remote remove paul\n$ <span>git</span> remote\norigin\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>一旦您使用这种方式删除了一个远程仓库，那么所有和这个远程仓库相关的远程跟踪分支以及配置信息也会一起被删除。</p>\n<h1 id=\"分支管理\"> 分支管理</h1>\n<h2 id=\"概述\"> 概述</h2>\n<p>分支就是科幻电影里面的平行宇宙，当您正在电脑前努力学习 Git 的时候，另一个您正在另一个平行宇宙里努力学习 SVN。</p>\n<p>如果两个平行宇宙互不干扰，那对现在的您也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，您既学会了 Git 又学会了 SVN!</p>\n<h2 id=\"创建与合并分支\"> 创建与合并分支</h2>\n<p>在版本回退里，您已经知道，每次提交，Git 都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在 Git 里，这个分支叫主分支，即 <code>master</code> 分支。<code>HEAD</code> 严格来说不是指向提交，而是指向 <code>master</code>，<code>master</code> 才是指向提交的，所以，<code>HEAD</code> 指向的就是当前分支。</p>\n<p>一开始的时候，<code>master</code> 分支是一条线，Git 用 <code>master</code> 指向最新的提交，再用 <code>HEAD</code> 指向 <code>master</code>，就能确定当前分支，以及当前分支的提交点:</p>\n<p><img src=\"./assets/branch.png\" alt=\"branch\" /></p>\n<p>每次提交，<code>master</code> 分支都会向前移动一步，这样，随着您不断提交，<code>master</code> 分支的线也越来越长:</p>\n<p>当我们创建新的分支，例如 dev 时，Git 新建了一个指针叫 <code>dev</code>，指向 <code>master</code> 相同的提交，再把 <code>HEAD</code> 指向 <code>dev</code>，就表示当前分支在 dev 上:</p>\n<p><img src=\"./assets/Dev.png\" alt=\"dev\" /></p>\n<p>您看，Git 创建一个分支很快，因为除了增加一个 <code>dev</code> 指针，改改 <code>HEAD</code> 的指向，工作区的文件都没有任何变化!</p>\n<p>不过，从现在开始，对工作区的修改和提交就是针对 dev 分支了，比如新提交一次后，<code>dev</code> 指针往前移动一步，而 <code>master</code> 指针不变:</p>\n<img src=\"./assets/newDev.png\" alt=\"newDev\"  />\n<p>假如我们在 dev 上的工作完成了，就可以把 dev 合并到 master 上。Git 怎么合并呢? 最简单的方法，就是直接把 master 指向 dev 的当前提交，就完成了合并:</p>\n<p><img src=\"./assets/1.png\" alt=\"1\" /></p>\n<p>所以 Git 合并分支也很快! 就改改指针，工作区内容也不变!</p>\n<p>合并完分支后，甚至可以删除 dev 分支。删除 dev 分支就是把 dev 指针给删掉，删掉后，我们就剩下了一条 master 分支:</p>\n\n<p>下面开始实战。首先，我们创建 dev 分支，然后切换到 dev 分支:</p>\n<div><pre><code>$ git checkout -b dev\nSwitched to a new branch &#39;dev&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p><code>git checkout</code> 命令加上 <code>-b</code> 参数表示创建并切换，相当于以下两条命令:</p>\n<div><pre><code>$ git branch dev\n# nothing\n$ git checkout dev\nSwitched to branch &#39;dev&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>然后，用 <code>git branch</code> 命令查看当前分支:</p>\n<div><pre><code>$ git branch\n* dev\n  master\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><code>git branch</code> 命令会列出所有分支，当前分支前面会标一个 <code>*</code> 号。</p>\n<p>然后，我们就可以在 dev 分支上正常提交，比如对 <code>readme.txt</code> 做个修改，加上一行:</p>\n<div><pre><code>Creating a new branch is quick.\n</code></pre>\n<div><span>1</span><br></div></div><p>然后提交:</p>\n<div><pre><code>$ git add readme.txt\n# nothing\n$ git commit -m &quot;branch test&quot;\n[dev b17d20e] branch test\n 1 file changed, 1 insertion(+)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>现在，dev 分支的工作完成，我们就可以切换回 master 分支:</p>\n<div><pre><code>$ git checkout master\nSwitched to branch &#39;master&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>切换回 master 分支后，再查看一个 <code>readme.txt</code> 文件，刚才添加的内容不见了! 因为那个提交是在 dev 分支上，而 master 分支此刻的提交点并没有变:</p>\n\n<p>现在，我们把 dev 分支的工作成果合并到 master 分支上:</p>\n<div><pre><code>$ git merge dev\nUpdating d46f35e..b17d20e\nFast-forward\n readme.txt | 1 +\n 1 file changed, 1 insertion(+)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p><code>git merge</code> 命令用于合并指定分支到当前分支。合并后，再查看 readme.txt 的内容，就可以看到，和 dev 分支的最新提交是完全一样的。</p>\n<p>查看文件：</p>\n<div><pre><code>cat readme.txt\n</code></pre>\n<div><span>1</span><br></div></div><p>注意到上面的 <code>Fast-forward</code> 信息，Git 告诉我们，这次合并是 “快进模式”，也就是直接把 master 指向 dev 的当前提交，所以合并速度非常快。当然，也不是每次合并都能 <code>Fast-forward</code>。合并完成后，就可以放心地删除 dev 分支了:</p>\n<div><pre><code>$ git branch -d dev\nDeleted branch dev (was b17d20e).\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>删除后，查看 <code>branch</code>，就只剩下 <code>master</code> 分支了:</p>\n<div><pre><code>$ git branch\n* master\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>因为创建、合并和删除分支非常快，所以 Git 鼓励您使用分支完成某个任务，合并后再删掉分支，这和直接在 <code>master</code> 分支上工作效果是一样的，但过程更安全。</p>\n<h3 id=\"分支小结\"> 分支小结</h3>\n<p>查看分支: <code>git branch</code></p>\n<p>创建分支: <code>git branch &lt;name&gt;</code></p>\n<p>切换分支: <code>git checkout &lt;name&gt;</code></p>\n<p>创建+切换分支: <code>git checkout -b &lt;name&gt;</code></p>\n<p>合并某分支到当前分支: <code>git merge &lt;name&gt;</code></p>\n<p>删除分支: <code>git branch -d &lt;name&gt;</code></p>\n<h2 id=\"冲突\"> 冲突</h2>\n<p>就是创建了一个分支feature1，并做出了修改，然后又在master上进行了修改，将feature1合并到master上时出现了冲突。修改冲突的内容后再提交：</p>\n<div><pre><code>$ git add readme.txt\n# nothing\n$ git commit -m &quot;conflict fixed&quot;\n[master cf810e4] conflict fixed\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>现在，<code>master</code> 分支和 <code>feature1</code> 分支变成了下图所示:</p>\n\n<p>最后，删除 feature1 分支:</p>\n<div><pre><code>$ git branch -d feature1\nDeleted branch feature1 (was 14096d0).\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"冲突小结\"> <strong>冲突小结</strong></h3>\n<p>1.当 Git 无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。解决冲突就是把 Git 合并失败的文件手动编辑为我们希望的内容，再提交。</p>\n<p>2.用 <code>git log --graph</code> 命令可以看到分支合并图。</p>\n<h2 id=\"分支管理策略\"> 分支管理策略</h2>\n<p>通常，合并分支时，如果可能，Git 会用 <code>Fast forward</code> 模式，但这种模式下，删除分支后，会丢掉分支信息。</p>\n<p>如果要强制禁用 <code>Fast forward</code> 模式，Git 就会在 merge 时生成一个新的 commit，这样，从分支历史上就可以看出分支信息。</p>\n<p>实战一下 <code>--no-ff</code> 方式的 <code>git merge</code>。首先，仍然创建并切换 <code>dev</code> 分支:</p>\n<div><pre><code>$ git checkout -b dev\nSwitched to a new branch &#39;dev&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>修改 readme.txt 文件，并提交一个新的 <code>commit</code>:</p>\n<div><pre><code>$ git add readme.txt\n# nothing\n$ git commit -m &quot;add merge&quot;\n[dev f52c633] add merge\n 1 file changed, 1 insertion(+)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>现在，我们切换回 <code>master</code>:</p>\n<div><pre><code>$ git checkout master\nSwitched to branch &#39;master&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>准备合并 <code>dev</code> 分支，请注意 <code>--no-ff</code> 参数，表示禁用 <code>Fast forward</code>:</p>\n<div><pre><code>$ git merge --no-ff -m &quot;merge with no-ff&quot; dev\nMerge made by the &#39;recursive&#39; strategy.\n readme.txt | 1 +\n 1 file changed, 1 insertion(+)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>因为本次合并要创建一个新的 <code>commit</code>，所以加上 <code>-m</code> 参数，把 <code>commit</code> 描述写进去。</p>\n<p>合并后，我们用 <code>git log</code> 看看分支历史:</p>\n<div><pre><code>$ git log --graph --pretty=oneline --abbrev-commit\n*   e1e9c68 (HEAD -&gt; master) merge with no-ff\n|\\\n| * f52c633 (dev) add merge\n|/\n*   cf810e4 conflict fixed\n...\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>可以看到，不使用 <code>Fast forward</code> 模式，<code>merge</code> 后就像这样:</p>\n\n<h3 id=\"分支管理惯例\"> 分支管理惯例</h3>\n<p>在实际开发中，我们应该按照几个基本原则进行分支管理:</p>\n<p>首先，<code>master</code> 分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p>\n<p>那在哪干活呢? 干活都在 <code>dev</code> 分支上，也就是说，<code>dev</code> 分支是不稳定的，到某个时候，比如 <code>1.0</code> 版本发布时，再把 <code>dev</code> 分支合并到 <code>master</code> 上，在 <code>master</code> 分支发布 <code>1.0</code> 版本；</p>\n<p>您和您的小伙伴们每个人都在 <code>dev</code> 分支上干活，每个人都有自己的分支，时不时地往 <code>dev</code> 分支上合并就可以了。</p>\n<p>所以，团队合作的分支看起来就像这样:</p>\n\n<h3 id=\"分支管理小结\"> 分支管理小结</h3>\n<p>Git 分支十分强大，在团队开发中应该充分应用。</p>\n<p>合并分支时，加上 <code>--no-ff</code> 参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而 <code>fast forward</code> 合并就看不出来曾经做过合并。</p>\n<h2 id=\"bug分支\"> Bug分支</h2>\n<p>软件开发中，bug 就像家常便饭一样。有了 bug 就需要修复，在 Git 中，由于分支是如此的强大，所以，每个 bug 都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。</p>\n<p>Git 还提供了一个 <code>stash</code> 功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作:</p>\n<div><pre><code>$ git stash\nSaved working directory and index state WIP on dev: f52c633 add merge\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>现在，用 <code>git status</code> 查看工作区，就是干净的(除非有没有被 Git 管理的文件)，因此可以放心地创建分支来修复 bug。</p>\n<p>首先确定要在哪个分支上修复 bug，假定需要在 master 分支上修复，就从 master 创建临时分支:</p>\n<div><pre><code>$ git checkout master\nSwitched to branch &#39;master&#39;\nYour branch is ahead of &#39;origin/master&#39; by 6 commits.\n  (use &quot;git push&quot; to publish your local commits)\n\n$ git checkout -b issue-101\nSwitched to a new branch &#39;issue-101&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>现在修复 bug，需要把“Git is free software ...”改为“Git is a free software ...”，然后提交:</p>\n<div><pre><code>git add readme.txt\n$ git commit -m &quot;fix bug 101&quot;\n[issue-101 4c805e2] fix bug 101\n 1 file changed, 1 insertion(+), 1 deletion(-)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>修复完成后，切换到 <code>master</code> 分支，并完成合并，最后删除 <code>issue-101</code> 分支:</p>\n<div><pre><code>$ git checkout master\nSwitched to branch &#39;master&#39;\nYour branch is ahead of &#39;origin/master&#39; by 6 commits.\n  (use &quot;git push&quot; to publish your local commits)\n\n$ git merge --no-ff -m &quot;merged bug fix 101&quot; issue-101\nMerge made by the &#39;recursive&#39; strategy.\n readme.txt | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>太棒了，原计划两个小时的 bug 修复只花了 5 分钟! 现在，是时候接着回到 <code>dev</code> 分支干活了!</p>\n<div><pre><code>$ git checkout dev\nSwitched to branch &#39;dev&#39;\n\n$ git status\nOn branch dev\nnothing to commit, working tree clean\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>工作区是干净的，刚才的工作现场存到哪去了? 用 <code>git stash list</code> 命令看看:</p>\n<div><pre><code>$ git stash list\nstash@{0}: WIP on dev: f52c633 add merge\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>工作现场还在，Git 把 stash 内容存在某个地方了，但是需要恢复一下，有两个办法:</p>\n<p>一是用 <code>git stash apply</code> 恢复，但是恢复后，<code>stash</code> 内容并不删除，您需要用 <code>git stash drop</code> 来删除；</p>\n<p>另一种方式是用 <code>git stash pop</code>，恢复的同时把 <code>stash</code> 内容也删了:</p>\n<div><pre><code>$ git stash pop\nOn branch dev\nChanges to be committed:\n  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)\n\n    new file:   hello.py\n\nChanges not staged for commit:\n  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)\n  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)\n\n    modified:   readme.txt\n\nDropped refs/stash@{0} (5d677e2ee266f39ea296182fb2354265b91b3b2a)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>再用 <code>git stash list</code> 查看，就看不到任何 stash 内容了。您可以多次 stash，恢复的时候，先用 <code>git stash list</code> 查看，然后恢复指定的 stash，用命令:</p>\n<div><pre><code>git stash apply stash@{0}\n</code></pre>\n<div><span>1</span><br></div></div><h3 id=\"暂存小结\"> 暂存小结</h3>\n<ul>\n<li>修复 bug 时，我们会通过创建新的 bug 分支进行修复，然后合并，最后删除；</li>\n<li>当手头工作没有完成时，先把工作现场 <code>git stash</code> 一下，然后去修复 bug，修复后，再 <code>git stash pop</code>，回到工作现场。</li>\n</ul>\n<h2 id=\"feature分支\"> Feature分支</h2>\n<p>软件开发中，总有无穷无尽的新的功能要不断添加进来。</p>\n<p>添加一个新功能时，您肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个 <code>feature</code> 分支，在上面开发，完成后，合并，最后，删除该 <code>feature</code> 分支。</p>\n<p>现在，您终于接到了一个新任务: 开发代号为 <code>Vulcan</code> 的新功能，该功能计划用于下一代星际飞船。</p>\n<p>于是准备开发:</p>\n<div><pre><code>$ git checkout -b feature-vulcan\nSwitched to a new branch &#39;feature-vulcan&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>5 分钟后，开发完毕:</p>\n<div><pre><code>git add vulcan.py\n\n$ git status\nOn branch feature-vulcan\nChanges to be committed:\n  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)\n\n    new file:   vulcan.py\n\n$ git commit -m &quot;add feature vulcan&quot;\n[feature-vulcan 287773e] add feature vulcan\n 1 file changed, 2 insertions(+)\n create mode 100644 vulcan.py\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>切回 <code>dev</code>，准备合并:</p>\n<div><pre><code>git checkout dev\n</code></pre>\n<div><span>1</span><br></div></div><p>一切顺利的话，feature 分支和 bug 分支是类似的，合并，然后删除。</p>\n<p>但是!</p>\n<p>就在此时，接到上级命令，因经费不足，新功能必须取消!</p>\n<p>虽然白干了，但是这个包含机密资料的分支还是必须就地销毁:</p>\n<div><pre><code>$ git branch -d feature-vulcan\nerror: The branch &#39;feature-vulcan&#39; is not fully merged.\nIf you are sure you want to delete it, run &#39;git branch -D feature-vulcan&#39;.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>销毁失败。Git 友情提醒，feature-vulcan 分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的 <code>-D</code> 参数。</p>\n<p>现在我们强行删除:</p>\n<div><pre><code>$ git branch -D feature-vulcan\nDeleted branch feature-vulcan (was 287773e).\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>终于删除成功!</p>\n<h3 id=\"删除小结-2\"> 删除小结</h3>\n<ul>\n<li>开发一个新 feature，最好新建一个分支；</li>\n<li>如果要丢弃一个没有被合并过的分支，可以通过 <code>git branch -D &lt;name&gt;</code> 强行删除。</li>\n</ul>\n<h2 id=\"多人协作\"> 多人协作</h2>\n<p>当您从远程仓库克隆时，实际上 Git 自动把本地的 <code>master</code> 分支和远程的 <code>master</code> 分支对应起来了，并且，远程仓库的默认名称是 <code>origin</code>。</p>\n<p>要查看远程库的信息，用 <code>git remote</code>:</p>\n<div><pre><code>$ git remote\norigin\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>或者，用 <code>git remote -v</code> 显示更详细的信息:</p>\n<div><pre><code>$ git remote -v\norigin  git@github.com:Hope-Studio/learngit.git (fetch)\norigin  git@github.com:Hope-Studio/learngit.git (push)\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>上面显示了可以抓取和推送的 <code>origin</code> 的地址。如果没有推送权限，就看不到 push 的地址。</p>\n<h3 id=\"推送分支\"> 推送分支</h3>\n<p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git 就会把该分支推送到远程库对应的远程分支上:</p>\n<div><pre><code>git push origin master\n</code></pre>\n<div><span>1</span><br></div></div><p>如果要推送其他分支，比如 <code>dev</code>，就改成:</p>\n<div><pre><code>git push origin dev\n</code></pre>\n<div><span>1</span><br></div></div><p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢?</p>\n<p><code>master</code> 分支是主分支，因此要时刻与远程同步；</p>\n<p><code>dev</code> 分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</p>\n<p><code>bug</code> 分支只用于在本地修复 bug，就没必要推到远程了，除非老板要看看您每周到底修复了几个 bug；</p>\n<p><code>feature</code> 分支是否推到远程，取决于您是否和您的小伙伴合作在上面开发。</p>\n<p>总之，就是在 Git 中，分支完全可以在本地自己藏着玩，是否推送，视您的心情而定!</p>\n<h3 id=\"抓取分支\"> 抓取分支</h3>\n<p>多人协作时，大家都会往 <code>master</code> 和 <code>dev</code> 分支上推送各自的修改。</p>\n<p>克隆：</p>\n<div><pre><code>$ git clone git@github.com:Hope-Studio/learngit.git\n</code></pre>\n<div><span>1</span><br></div></div><p>当您的小伙伴从远程库 clone 时，默认情况下，您的小伙伴只能看到本地的 <code>master</code> 分支。不信可以用 <code>git branch</code> 命令看看:</p>\n<div><pre><code>$ git branch\n* master\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>现在，您的小伙伴要在 <code>dev</code> 分支上开发，就必须创建远程 <code>origin</code> 的 <code>dev</code> 分支到本地，于是他用这个命令创建本地 <code>dev</code> 分支:</p>\n<div><pre><code>git checkout -b dev origin/dev\n</code></pre>\n<div><span>1</span><br></div></div><p>现在，他就可以在 <code>dev</code> 上继续修改，然后，时不时地把 <code>dev</code> 分支 push 到远程:</p>\n<div><pre><code>git add env.txt\n\n$ git commit -m &quot;add env&quot;\n[dev 7a5e5dd] add env\n 1 file changed, 1 insertion(+)\n create mode 100644 env.txt\n\n$ git push origin dev\nCounting objects: 3, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 308 bytes | 308.00 KiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo github.com:Hope-Studio/learngit.git\n   f52c633..7a5e5dd  dev -&gt; dev\n\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>您的小伙伴已经向 <code>origin/dev</code> 分支推送了他的提交，想要获取他的工作，您可以执行 <code>git fetch origin dev</code>。</p>\n<p>如果这时碰巧您也对同样的文件作了修改，并试图推送:</p>\n<div><pre><code>$ cat env.txt\nenv\n\ngit add env.txt\n\n$ git commit -m &quot;add new env&quot;\n[dev 7bd91f1] add new env\n 1 file changed, 1 insertion(+)\n create mode 100644 env.txt\n\n$ git push origin dev\nTo github.com:Hope-Studio/learngit.git\n ! [rejected]        dev -&gt; dev (non-fast-forward)\nerror: failed to push some refs to &#39;git@github.com:Hope-Studio/learngit.git&#39;\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: &#39;git pull ...&#39;) before pushing again.\nhint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>推送失败，因为您的小伙伴的最新提交和您试图推送的提交有冲突，解决办法也很简单，Git 已经提示我们，先用 <code>git pull</code> 把最新的提交从 <code>origin/dev</code> 抓下来，然后，在本地合并，解决冲突，再推送:</p>\n<div><pre><code>$ git pull\nThere is no tracking information for the current branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\n\n    git pull &lt;remote&gt; &lt;branch&gt;\n\nIf you wish to set tracking information for this branch you can do so with:\n\n    git branch --set-upstream-to=origin/&lt;branch&gt; dev\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p><code>git pull</code> 也失败了，原因是没有指定本地 <code>dev</code> 分支与远程 <code>origin/dev</code> 分支的链接，根据提示，设置 <code>dev</code> 和 <code>origin/dev</code> 的链接:</p>\n<div><pre><code>$ git branch --set-upstream-to=origin/dev dev\nBranch &#39;dev&#39; set up to track remote branch &#39;dev&#39; from &#39;origin&#39;.\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>再 pull:</p>\n<div><pre><code>$ git pull\nAuto-merging env.txt\nCONFLICT (add/add): Merge conflict in env.txt\nAutomatic merge failed; fix conflicts and then commit the result.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>这回 <code>git pull</code> 成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再 push:</p>\n<div><pre><code>$ git commit -m &quot;fix env conflict&quot;\n[dev 57c53ab] fix env conflict\n\n$ git push origin dev\nCounting objects: 6, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (6/6), 621 bytes | 621.00 KiB/s, done.\nTotal 6 (delta 0), reused 0 (delta 0)\nTo github.com:Hope-Studio/learngit.git\n   7a5e5dd..57c53ab  dev -&gt; dev\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>因此，多人协作的工作模式通常是这样:</p>\n<p>首先，可以试图用 <code>git push origin &lt;branch-name&gt;</code> 推送自己的修改；</p>\n<p>如果推送失败，则因为远程分支比您的本地更新，需要先用 <code>git pull</code> 试图合并；</p>\n<p>如果合并有冲突，则解决冲突，并在本地提交；</p>\n<p>没有冲突或者解决掉冲突后，再用 <code>git push origin &lt;branch-name&gt;</code> 推送就能成功!</p>\n<p>如果 <code>git pull</code> 提示 <code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令 <code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p>\n<p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p>\n<h3 id=\"多人协作小结\"> 多人协作小结</h3>\n<ul>\n<li>查看远程库信息，使用 <code>git remote -v</code>；</li>\n<li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li>\n<li>从本地推送分支，使用 <code>git push origin branch-name</code>，如果推送失败，先用 <code>git pull</code> 抓取远程的新提交；</li>\n<li>在本地创建和远程分支对应的分支，使用 <code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li>\n<li>建立本地分支和远程分支的关联，使用 <code>git branch --set-upstream branch-name origin/branch-name</code>；</li>\n<li>从远程拉取分支，使用 <code>git fetch</code>。</li>\n<li><code>git pull</code>，相当于 <code>git fetch</code> + <code>git merge</code>，如果您的修改并没有和远程的修改发生冲突，两者会自动合并到您的本地，您可以直接推送上去。如果有冲突，要先处理冲突。</li>\n</ul>\n<h2 id=\"rebase\"> Rebase</h2>\n<p>在上一节我们看到了，多人在同一个分支上协作时，很容易出现冲突。即使没有冲突，后 <code>push</code> 的童鞋不得不先 <code>pull</code>，在本地合并，然后才能 <code>push</code> 成功。</p>\n<p>Git 有一种称为 <code>rebase</code> 的操作，有人把它翻译成“变基”。</p>\n<p><code>rebase</code> 操作的特点: 把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。</p>\n<h3 id=\"rebase-小结\"> Rebase 小结</h3>\n<ul>\n<li><code>rebase</code> 操作可以把本地未 <code>push</code> 的分叉提交历史整理成直线；</li>\n<li><code>rebase</code> 的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</li>\n</ul>\n<h1 id=\"标签管理\"> 标签管理</h1>\n<p>发布一个版本时，我们通常先在版本库中打一个标签 (<code>tag</code>)，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。</p>\n<p>Git 的标签虽然是版本库的快照，但其实它就是指向某个 <code>commit</code> 的指针(跟分支很像对不对? 但是分支可以移动，标签不能移动)，所以，创建和删除标签都是瞬间完成的。</p>\n<p><code>tag</code> 就是一个让人容易记住的有意义的名字，它跟某个 <code>commit</code> 绑在一起。</p>\n<p>提示：推荐的标签规范是以小写字母 <code>v</code> 开头，后接 <code>x.x</code> 或 <code>x.x.x</code> 等若干位版本号。</p>\n<h2 id=\"创建轻量标签\"> 创建轻量标签</h2>\n<p>在 Git 中打标签非常简单，首先，切换到需要打标签的分支上:</p>\n<div><pre><code>$ git branch\n* dev\n  master\n$ git checkout master\nSwitched to branch &#39;master&#39;\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>然后，敲命令 <code>git tag &lt;name&gt;</code> 就可以打一个新标签:</p>\n<div><pre><code>$ git tag v1.0\n-- no output --\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>可以用命令 <code>git tag</code> 查看所有标签:</p>\n<div><pre><code>$ git tag\nv1.0\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>对某个特定的commit id打标签：</p>\n<div><pre><code>$ git tag v0.9 f52c633\n--no output --\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>可以用 <code>git show &lt;tagname&gt;</code> 查看标签信息:</p>\n<div><pre><code>$ git show v0.9\ncommit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)\nAuthor: Michael Liao &lt;askxuefeng@gmail.com&gt;\nDate:   Fri May 18 21:56:54 2018 +0800\n\n    add merge\n\ndiff --git a/readme.txt b/readme.txt\n...\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id=\"附注标签\"> 附注标签</h2>\n<p>Git 还可以创建带有说明的标签，用 <code>-a</code> 指定标签名，<code>-m</code> 指定说明文字:</p>\n<div><pre><code>$ git tag -a v0.1 -m &quot;version 0.1 released&quot; 1094adb\n--no output --\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><h3 id=\"添加小结\"> 添加小结</h3>\n<p>命令 <code>git tag &lt;tagname&gt;</code> 用于新建一个标签，默认为 <code>HEAD</code>，也可以指定一个 <code>commit id</code>；</p>\n<p>命令 <code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code> 可以指定标签信息；</p>\n<p>命令 <code>git tag</code> 可以查看所有标签。</p>\n<h2 id=\"操作标签\"> 操作标签</h2>\n<p>如果标签打错了，也可以删除:</p>\n<div><pre><code>$ git tag -d v0.1\nDeleted tag &#39;v0.1&#39; (was f15b0dd)\\\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。</p>\n<p>如果要推送某个标签到远程，使用命令 <code>git push origin &lt;tagname&gt;</code>:</p>\n<div><pre><code>$ git push origin v1.0\nTotal 0 (delta 0), reused 0 (delta 0)\nTo github.com:Hope-Studio/learngit.git\n * [new tag]         v1.0 -&gt; v1.0\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>或者，一次性推送全部尚未推送到远程的本地标签:</p>\n<div><pre><code>$ git push origin --tags\nTotal 0 (delta 0), reused 0 (delta 0)\nTo github.com:Hope-Studio/learngit.git\n * [new tag]         v0.9 -&gt; v0.9\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除:</p>\n<div><pre><code>$ git tag -d v0.9\nDeleted tag &#39;v0.9&#39; (was f52c633)\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>然后，从远程删除。删除命令也是 push，但是格式如下:</p>\n<div><pre><code>$ git push origin :refs/tags/v0.9\nTo github.com:Hope-Studio/learngit.git\n - [deleted]         v0.9\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>要看看是否真的从远程库删除了标签，可以登陆 GitHub 查看。</p>\n<h3 id=\"管理标签小结\"> 管理标签小结</h3>\n<ul>\n<li>命令 <code>git push origin &lt;tagname&gt;</code> 可以推送一个本地标签；</li>\n<li>命令 <code>git push origin --tags</code> 可以推送全部未推送过的本地标签；</li>\n<li>命令 <code>git tag -d &lt;tagname&gt;</code> 可以删除一个本地标签；</li>\n<li>命令 <code>git push origin :refs/tags/&lt;tagname&gt;</code> 可以删除一个远程标签。</li>\n</ul>\n<h1 id=\"忽略特殊文件\"> 忽略特殊文件</h1>\n<p>有些时候，您必须把某些文件放到 Git 工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次 <code>git status</code> 都会显示 <code>Untracked files</code> ...，有强迫症的童鞋心里肯定不爽。</p>\n<p>好在 Git 考虑到了大家的感受，这个问题解决起来也很简单，在 Git 工作区的根目录下创建一个特殊的 <code>.gitignore</code> 文件，然后把要忽略的文件名填进去，Git 就会自动忽略这些文件。</p>\n<p>忽略文件的原则是:</p>\n<ul>\n<li>忽略操作系统自动生成的文件，比如缩略图等；</li>\n<li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如 Java 编译产生的 <code>.class</code> 文件；</li>\n<li>忽略您自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li>\n</ul>\n<p>最终得到一个完整的 <code>.gitignore</code> 文件，内容如下:</p>\n<div><pre><code># Windows:\n\nThumbs.db\nehthumbs.db\nDesktop.ini\n\n# Python:\n\n_.py[cod]\n_.so\n_.egg\n_.egg-info\ndist\nbuild\n\n# My configurations:\n\ndb.ini\ndeploy_key_rsa\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>最后一步就是把 <code>.gitignore</code> 也提交到 Git，就完成了! 当然检验 <code>.gitignore</code> 的标准是 <code>git status</code> 命令是不是说 <code>working directory clean</code>。</p>\n<p>使用 Windows 的童鞋注意了，如果您在资源管理器里新建一个 <code>.gitignore</code> 文件，它会非常弱智地提示您必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为 <code>.gitignore</code> 了。</p>\n<p>有些时候，您想添加一个文件到 Git，但发现添加不了，原因是这个文件被 <code>.gitignore</code> 忽略了:</p>\n<div><pre><code>$ git add App.class\nThe following paths are ignored by one of your .gitignore files:\nApp.class\nUse -f if you really want to add them.\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>如果您确实想添加该文件，可以用 <code>-f</code> 强制添加到 Git:</p>\n<div><pre><code>git add -f App.class\n</code></pre>\n<div><span>1</span><br></div></div><p>或者您发现，可能是 <code>.gitignore</code> 写得有问题，需要找出来到底哪个规则写错了，可以用 <code>git check-ignore</code> 命令检查:</p>\n<div><pre><code>$ git check-ignore -v App.class\n.gitignore:3:*.class    App.class\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><p>Git 会告诉我们，<code>.gitignore</code> 的第 3 行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。</p>\n<h2 id=\"格式规范\"> 格式规范</h2>\n<div><pre><code># 忽略所有的 .a 文件\n*.a\n\n# 但跟踪所有的 lib.a，即便您在前面忽略了 .a 文件\n!lib.a\n\n# 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO\n/TODO\n\n# 忽略任何目录下名为 build 的文件夹\nbuild/\n\n# 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt\ndoc/*.txt\n\n# 忽略 doc/ 目录及其所有子目录下的 .pdf 文件\ndoc/**/*.pdf\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id=\"小结-4\"> 小结</h2>\n<ul>\n<li>忽略某些文件时，需要编写 <code>.gitignore</code>；</li>\n<li><code>.gitignore</code> 文件本身要放到版本库里，并且可以对 <code>.gitignore</code> 做版本管理!</li>\n</ul>\n<h1 id=\"git原理\"> Git原理</h1>\n<h2 id=\"直接记录快照-而非差异比较\"> 直接记录快照，而非差异比较</h2>\n<h2 id=\"近乎所有操作都是本地执行\"> 近乎所有操作都是本地执行</h2>\n<h2 id=\"git保证完整性\"> Git保证完整性</h2>\n<h2 id=\"git-一般只添加数据\"> Git 一般只添加数据</h2>\n<h2 id=\"三种状态\"> 三种状态</h2>\n<p>Git 有三种状态，您的文件可能处于其中之一: 已提交(committed)、已修改(modified) 和 已暂存(staged)。</p>\n<ul>\n<li>已修改表示修改了文件，但还没保存到数据库中。</li>\n<li>已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li>\n<li>已提交表示数据已经安全地保存在本地数据库中。</li>\n</ul>\n<p>这会让我们的 Git 项目拥有三个阶段: 工作区、暂存区以及 Git 目录。</p>\n<p>基本的 Git 工作流程如下:</p>\n<ol>\n<li>在工作区中修改文件。</li>\n<li>将您想要下次提交的更改选择性地暂存，这样只会将更改的部分添加到暂存区。</li>\n<li>提交更新，找到暂存区的文件，将快照永久性存储到 Git 目录。</li>\n</ol>\n<p>如果 Git 目录中保存着特定版本的文件，就属于 已提交 状态。如果文件已修改并放入暂存区，就属于 已暂存 状态。如果自上次检出后，作了修改但还没有放到暂存区域，就是 已修改 状态。</p>\n<h1 id=\"自定义git\"> 自定义Git</h1>\n<h2 id=\"配置别名\"> 配置别名</h2>\n<h2 id=\"配置文件\"> 配置文件</h2>\n<p>配置 Git 的时候，加上 <code>--global</code> 是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。</p>\n<p>配置别名也可以直接修改这个文件（用户主目录下的.gitconfig），如果改错了，可以删掉文件重新通过命令配置。</p>\n<h3 id=\"别名小结\"> 别名小结</h3>\n<ul>\n<li>给 Git 配置好别名，就可以输入命令时偷个懒。我们鼓励偷懒。</li>\n</ul>\n",
      "image": "https://mrhope.site/assets/img/git3.086f5ec6.jpg",
      "date_published": "2021-06-03T11:56:08.000Z",
      "date_modified": "2021-06-03T11:56:08.000Z",
      "authors": [
        {
          "name": "jia-123"
        }
      ],
      "tags": []
    },
    {
      "title": "组件禁用",
      "url": "https://jia-123.github.io/guide/disable/",
      "id": "https://jia-123.github.io/guide/disable/",
      "summary": "<p>你可以通过设置页面的 Frontmatter，在页面禁用一些功能。</p>\n",
      "content_html": "<p>你可以通过设置页面的 Frontmatter，在页面禁用一些功能。</p>\n\n<p>本页面应当禁用了:</p>\n<ul>\n<li>返回顶部按钮</li>\n<li>路径导航</li>\n<li>页面信息</li>\n<li>评论组件</li>\n<li>页脚</li>\n</ul>\n",
      "date_published": "2021-06-03T11:56:08.000Z",
      "date_modified": "2021-06-03T11:56:08.000Z",
      "authors": [
        {
          "name": "jia-123"
        }
      ],
      "tags": [
        "使用指南"
      ]
    },
    {
      "title": "密码加密的文章",
      "url": "https://jia-123.github.io/guide/encrypt/",
      "id": "https://jia-123.github.io/guide/encrypt/",
      "content_html": "<h1 id=\"密码加密的文章\"> 密码加密的文章</h1>\n<p>实际的文章内容。</p>\n<p>段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。</p>\n<p>段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。</p>\n",
      "date_published": "2021-06-03T11:56:08.000Z",
      "date_modified": "2021-06-03T11:56:08.000Z",
      "authors": [
        {
          "name": "jia-123"
        }
      ],
      "tags": [
        "使用指南"
      ]
    },
    {
      "title": "Markdown 增强",
      "url": "https://jia-123.github.io/guide/markdown/",
      "id": "https://jia-123.github.io/guide/markdown/",
      "summary": "<p><code>vuepress-theme-hope</code> 通过内置 <a href=\"https://vuepress-theme-hope.github.io/md-enhance\" target=\"_blank\" rel=\"noopener noreferrer\">md-enhance</a>，在 Markdown 中启用了更多的语法与新功能。</p>\n",
      "content_html": "<p><code>vuepress-theme-hope</code> 通过内置 <a href=\"https://vuepress-theme-hope.github.io/md-enhance\" target=\"_blank\" rel=\"noopener noreferrer\">md-enhance</a>，在 Markdown 中启用了更多的语法与新功能。</p>\n\n<h2 id=\"一键启用\"> 一键启用</h2>\n<p>你可以设置 <code>themeconfig.mdEnhance.enableAll</code> 启用 <a href=\"https://vuepress-theme-hope.github.io/md-enhance\" target=\"_blank\" rel=\"noopener noreferrer\">md-enhance</a> 插件的所有功能。</p>\n<div><div><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br><br></div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>\n  themeConfig<span>:</span> <span>{</span>\n    mdEnhance<span>:</span> <span>{</span>\n      enableAll<span>:</span> <span>true</span><span>,</span>\n    <span>}</span><span>,</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id=\"新增的更多语法\"> 新增的更多语法</h2>\n<h3 id=\"上下角标\"> 上下角标</h3>\n<p>19<sup>th</sup> H<sub>2</sub>O</p>\n<details><summary>代码</summary>\n<div><pre><code>19^th^ H<span><span>~</span><span>2</span><span>~</span></span>O\n</code></pre>\n<div><span>1</span><br></div></div></details>\n<ul>\n<li><a href=\"https://vuepress-theme-hope.github.io/zh/guide/markdown/sup-sub/\" target=\"_blank\" rel=\"noopener noreferrer\">点击查看</a></li>\n</ul>\n<h3 id=\"自定义对齐\"> 自定义对齐</h3>\n<div>\n<p>我是居中的</p>\n</div>\n<div>\n<p>我在右对齐</p>\n</div>\n<details><summary>代码</summary>\n<div><pre><code>::: center\n\n我是居中的\n\n:::\n\n::: right\n\n我在右对齐\n\n:::\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></details>\n<ul>\n<li><a href=\"https://vuepress-theme-hope.github.io/zh/guide/markdown/align/\" target=\"_blank\" rel=\"noopener noreferrer\">点击查看</a></li>\n</ul>\n<h3 id=\"脚注\"> 脚注</h3>\n<p>此文字有脚注<sup></sup>.</p>\n<details><summary>代码</summary>\n<div><pre><code>此文字有脚注[^first].\n\n<span><span>[</span><span>^first</span><span>]</span><span>:</span> 这是脚注内容</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></details>\n<ul>\n<li><a href=\"https://vuepress-theme-hope.github.io/zh/guide/markdown/footnote/\" target=\"_blank\" rel=\"noopener noreferrer\">点击查看</a></li>\n</ul>\n<h3 id=\"标记\"> 标记</h3>\n<p>你可以标记 <mark>重要的内容</mark> 。</p>\n<details><summary>代码</summary>\n<div><pre><code>你可以标记 ==重要的内容== 。\n</code></pre>\n<div><span>1</span><br></div></div></details>\n<ul>\n<li><a href=\"https://vuepress-theme-hope.github.io/zh/guide/markdown/mark/\" target=\"_blank\" rel=\"noopener noreferrer\">点击查看</a></li>\n</ul>\n<h3 id=\"任务列表\"> 任务列表</h3>\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-0\"><label for=\"task-item-0\"> 计划 1</label></li>\n<li><input type=\"checkbox\"  disabled=\"disabled\" id=\"task-item-1\"><label for=\"task-item-1\"> 计划 2</label></li>\n</ul>\n<details><summary>Code</summary>\n<div><pre><code><span>-</span> [x] 计划 1\n<span>-</span> [ ] 计划 2\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div></details>\n<ul>\n<li><a href=\"https://vuepress-theme-hope.github.io/guide/markdown/tasklist/\" target=\"_blank\" rel=\"noopener noreferrer\">点击查看</a></li>\n</ul>\n<h3 id=\"流程图\"> 流程图</h3>\n<i>Not supported content</i><details><summary>代码</summary>\n<div><pre><code><span><span>```</span><span>flow</span>\n<span>cond=>condition: Process?\nprocess=>operation: Process\ne=>end: End\n\ncond(yes)->process->e\ncond(no)->e</span>\n<span>```</span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div></details>\n<ul>\n<li><a href=\"https://vuepress-theme-hope.github.io/zh/guide/markdown/flowchart/\" target=\"_blank\" rel=\"noopener noreferrer\">点击查看</a></li>\n</ul>\n<h2 id=\"mermaid\"> Mermaid</h2>\n<Mermaid id=\"mermaid-64a57060\" data-code=\"graph%20TD%3B%0A%20%20%20%20A--%3EB%3B%0A%20%20%20%20A--%3EC%3B%0A%20%20%20%20B--%3ED%3B%0A%20%20%20%20C--%3ED%3B%0A\"></Mermaid><details><summary>代码</summary>\n<div><pre><code><span><span>```</span><span>mermaid</span>\n<span>graph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    C-->D;</span>\n<span>```</span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></details>\n<ul>\n<li><a href=\"https://vuepress-theme-hope.github.io/zh/guide/markdown/mermaid/\" target=\"_blank\" rel=\"noopener noreferrer\">点击查看</a></li>\n</ul>\n<h3 id=\"tex-语法\"> Tex 语法</h3>\n<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden=\"true\"><span><span style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span><span></span><span><span><span><span style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.05556em;\">∂</span><span><span style=\"margin-right:0.03588em;\">ω</span><span><span><span><span style=\"height:0.590392em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.02778em;\">r</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.05556em;\">∂</span><span><span><span><span style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.02778em;\">r</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"top:0em;\"><span>(</span></span><span><span></span><span><span><span><span style=\"height:1.341392em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.03588em;\">ω</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.03588em;\">y</span><span><span><span><span style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span style=\"margin-right:0.03588em;\">ω</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"top:0em;\"><span>)</span></span></span><span style=\"margin-right:0.2777777777777778em;\"></span><span>=</span><span style=\"margin-right:0.2777777777777778em;\"></span></span><span><span style=\"height:3.027669em;vertical-align:-1.277669em;\"></span><span><span style=\"top:0em;\"><span>(</span></span><span><span></span><span><span><span><span style=\"height:1.341392em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span style=\"margin-right:0.03588em;\">ω</span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.03588em;\">y</span><span><span><span><span style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span style=\"margin-right:0.03588em;\">ω</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"top:0em;\"><span>)</span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span style=\"top:0em;\"><span>{</span></span><span>(</span><span>lo<span style=\"margin-right:0.01389em;\">g</span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.03588em;\">y</span><span><span>)</span><span><span><span><span style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span style=\"margin-right:0.02778em;\">r</span></span></span></span></span></span></span></span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span><span><span><span style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style=\"top:-3.050005em;\"><span style=\"height:3.05em;\"></span><span><span>∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span style=\"height:3.05em;\"></span><span><span style=\"margin-right:0.02778em;\">r</span></span></span></span><span>​</span></span><span><span style=\"height:1.277669em;\"><span></span></span></span></span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span><span></span><span><span><span><span style=\"height:1.5016639999999999em;\"><span style=\"top:-2.314em;\"><span style=\"height:3em;\"></span><span><span><span style=\"margin-right:0.03588em;\">ω</span><span><span><span><span style=\"height:0.750664em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span style=\"height:3em;\"></span><span style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span style=\"height:3em;\"></span><span><span>(</span><span>−</span><span>1</span><span><span>)</span><span><span><span><span style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span>i</span></span></span></span></span></span></span></span><span style=\"margin-right:0.02778em;\">r</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>⋯</span><span style=\"margin-right:0.16666666666666666em;\"></span><span>(</span><span style=\"margin-right:0.02778em;\">r</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>−</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>i</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>+</span><span style=\"margin-right:0.2222222222222222em;\"></span><span>1</span><span>)</span><span>(</span><span>lo<span style=\"margin-right:0.01389em;\">g</span></span><span style=\"margin-right:0.16666666666666666em;\"></span><span style=\"margin-right:0.03588em;\">y</span><span><span>)</span><span><span><span><span style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span style=\"height:2.7em;\"></span><span><span><span style=\"margin-right:0.02778em;\">r</span><span>−</span><span>i</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span><span style=\"top:0em;\"><span>}</span></span></span></span></span></span></span></p>\n<details><summary>代码</summary>\n<div><pre><code>$$\n\\frac {\\partial^r} {\\partial \\omega^r} \\left(\\frac {y^{\\omega}} {\\omega}\\right)\n= \\left(\\frac {y^{\\omega}} {\\omega}\\right) \\left\\{(\\log y)^r + \\sum_{i=1}^r \\frac {(-1)^i r \\cdots (r-i+1) (\\log y)^{r-i}} {\\omega^i} \\right\\}\n$$\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></details>\n<ul>\n<li><a href=\"https://vuepress-theme-hope.github.io/zh/guide/markdown/tex/\" target=\"_blank\" rel=\"noopener noreferrer\">点击查看</a></li>\n</ul>\n<h3 id=\"代码案例\"> 代码案例</h3>\n\n          <div\n            id=\"code-demo-e18e4abe\"\n           \n  \n data-title=\"%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%20Demo\"\n\n            data-code=\"%7B%22html%22%3A%22%3Ch1%3EMr.Hope%3C%2Fh1%3E%5Cn%3Cp%3E%3Cspan%20id%3D%5C%22very%5C%22%3E%E5%8D%81%E5%88%86%3C%2Fspan%3E%20%E5%B8%85%3C%2Fp%3E%5Cn%22%2C%22js%22%3A%22document.querySelector(%5C%22%23very%5C%22).addEventListener(%5C%22click%5C%22%2C%20()%20%3D%3E%20%7B%5Cn%20%20alert(%5C%22%E5%8D%81%E5%88%86%E5%B8%85%5C%22)%3B%5Cn%7D)%3B%5Cn%22%2C%22css%22%3A%22span%20%7B%5Cn%20%20color%3A%20red%3B%5Cn%7D%5Cn%22%7D\"\n          >\n              <div>\n                \n              </div>\n              <div>\n                <div>\n<div><pre><code><span><span><span>&lt;</span>h1</span><span>></span></span>Mr.Hope<span><span><span>&lt;/</span>h1</span><span>></span></span>\n<span><span><span>&lt;</span>p</span><span>></span></span><span><span><span>&lt;</span>span</span> <span>id</span><span><span>=</span><span>\"</span>very<span>\"</span></span><span>></span></span>十分<span><span><span>&lt;/</span>span</span><span>></span></span> 帅<span><span><span>&lt;/</span>p</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br></div></div><div><pre><code>document<span>.</span><span>querySelector</span><span>(</span><span>\"#very\"</span><span>)</span><span>.</span><span>addEventListener</span><span>(</span><span>\"click\"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n  <span>alert</span><span>(</span><span>\"十分帅\"</span><span>)</span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>span</span> <span>{</span>\n  <span>color</span><span>:</span> red<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>\n            </div>\n          </div>\n          \n        </div>\n<details><summary>代码</summary>\n<div><pre><code>::: demo 一个普通 Demo\n\n<span><span>```</span><span>html</span>\n<span><span><span><span>&lt;</span>h1</span><span>></span></span>Mr.Hope<span><span><span>&lt;/</span>h1</span><span>></span></span>\n<span><span><span>&lt;</span>p</span><span>></span></span><span><span><span>&lt;</span>span</span> <span>id</span><span><span>=</span><span>\"</span>very<span>\"</span></span><span>></span></span>十分<span><span><span>&lt;/</span>span</span><span>></span></span> 帅<span><span><span>&lt;/</span>p</span><span>></span></span></span>\n<span>```</span></span>\n\n<span><span>```</span><span>js</span>\n<span>document<span>.</span><span>querySelector</span><span>(</span><span>\"#very\"</span><span>)</span><span>.</span><span>addEventListener</span><span>(</span><span>\"click\"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n  <span>alert</span><span>(</span><span>\"十分帅\"</span><span>)</span><span>;</span>\n<span>}</span><span>)</span><span>;</span></span>\n<span>```</span></span>\n\n<span><span>```</span><span>css</span>\n<span><span>span</span> <span>{</span>\n  <span>color</span><span>:</span> red<span>;</span>\n<span>}</span></span>\n<span>```</span></span>\n\n:::\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div></details>\n\n          <div\n            id=\"code-demo-3973beae\"\n           \n  data-type=\"react\"\n data-title=\"%E4%B8%80%E4%B8%AA%20React%20Demo\"\n\n            data-code=\"%7B%22js%22%3A%22export%20default%20class%20App%20extends%20React.Component%20%7B%5Cn%20%20constructor(props)%20%7B%5Cn%20%20%20%20super(props)%3B%5Cn%20%20%20%20this.state%20%3D%20%7B%20message%3A%20%5C%22%E5%8D%81%E5%88%86%E5%B8%85%5C%22%20%7D%3B%5Cn%20%20%7D%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3Cdiv%20className%3D%5C%22box-react%5C%22%3E%5Cn%20%20%20%20%20%20%20%20Mr.Hope%20%3Cspan%3E%7Bthis.state.message%7D%3C%2Fspan%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22css%22%3A%22.box-react%20span%20%7B%5Cn%20%20color%3A%20red%3B%5Cn%7D%5Cn%22%7D\"\n          >\n              <div>\n                \n              </div>\n              <div>\n                <div>\n<div><pre><code><span>export</span> <span>default</span> <span>class</span> <span>App</span> <span>extends</span> <span>React<span>.</span>Component</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>props</span><span>)</span> <span>{</span>\n    <span>super</span><span>(</span>props<span>)</span><span>;</span>\n    <span>this</span><span>.</span>state <span>=</span> <span>{</span> message<span>:</span> <span>\"十分帅\"</span> <span>}</span><span>;</span>\n  <span>}</span>\n  <span>render</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>(</span>\n      <span>&lt;</span>div className<span>=</span><span>\"box-react\"</span><span>></span>\n        Mr<span>.</span>Hope <span>&lt;</span>span<span>></span><span>{</span><span>this</span><span>.</span>state<span>.</span>message<span>}</span><span>&lt;</span><span>/</span>span<span>></span>\n      <span>&lt;</span><span>/</span>div<span>></span>\n    <span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><div><pre><code><span>.box-react span</span> <span>{</span>\n  <span>color</span><span>:</span> red<span>;</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>\n            </div>\n          </div>\n          \n        </div>\n<details><summary>代码</summary>\n<div><pre><code>::: demo [react] 一个 React Demo\n\n<span><span>```</span><span>js</span>\n<span><span>export</span> <span>default</span> <span>class</span> <span>App</span> <span>extends</span> <span>React<span>.</span>Component</span> <span>{</span>\n  <span>constructor</span><span>(</span><span>props</span><span>)</span> <span>{</span>\n    <span>super</span><span>(</span>props<span>)</span><span>;</span>\n    <span>this</span><span>.</span>state <span>=</span> <span>{</span> message<span>:</span> <span>\"十分帅\"</span> <span>}</span><span>;</span>\n  <span>}</span>\n  <span>render</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>(</span>\n      <span>&lt;</span>div className<span>=</span><span>\"box-react\"</span><span>></span>\n        Mr<span>.</span>Hope <span>&lt;</span>span<span>></span><span>{</span><span>this</span><span>.</span>state<span>.</span>message<span>}</span><span>&lt;</span><span>/</span>span<span>></span>\n      <span>&lt;</span><span>/</span>div<span>></span>\n    <span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span></span>\n<span>```</span></span>\n\n<span><span>```</span><span>css</span>\n<span><span>.box-react span</span> <span>{</span>\n  <span>color</span><span>:</span> red<span>;</span>\n<span>}</span></span>\n<span>```</span></span>\n\n:::\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div></details>\n\n          <div\n            id=\"code-demo-08f119be\"\n           \n  data-type=\"vue\"\n data-title=\"%E4%B8%80%E4%B8%AA%20Vue%20Demo\"\n\n            data-code=\"%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22box-vue%5C%22%3E%5Cn%20%20%20%20Mr.Hope%20%3Cspan%3E%7B%7B%20message%20%7D%7D%3C%2Fspan%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20data%3A%20()%20%3D%3E%20(%7B%20message%3A%20%5C%22%E5%8D%81%E5%88%86%E5%B8%85%5C%22%20%7D)%2C%5Cn%7D%3B%5Cn%3C%2Fscript%3E%5Cn%3Cstyle%3E%5Cn.box-vue%20span%20%7B%5Cn%20%20color%3A%20red%3B%5Cn%7D%5Cn%3C%2Fstyle%3E%5Cn%22%7D\"\n          >\n              <div>\n                \n              </div>\n              <div>\n                <div>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>box-vue<span>\"</span></span><span>></span></span>\n    Mr.Hope <span><span><span>&lt;</span>span</span><span>></span></span>{{ message }}<span><span><span>&lt;/</span>span</span><span>></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>data</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>(</span><span>{</span> message<span>:</span> <span>\"十分帅\"</span> <span>}</span><span>)</span><span>,</span>\n<span>}</span><span>;</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>style</span><span>></span></span><span><span>\n<span>.box-vue span</span> <span>{</span>\n  <span>color</span><span>:</span> red<span>;</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>style</span><span>></span></span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div>\n            </div>\n          </div>\n          \n        </div>\n<details><summary>代码</summary>\n<div><pre><code>::: demo [vue] 一个 Vue Demo\n\n<span><span>```</span><span>vue</span>\n<span>&lt;template>\n  &lt;div>\n    Mr.Hope &lt;span>{{ message }}&lt;/span>\n  &lt;/div>\n&lt;/template>\n&lt;script>\nexport default {\n  data: () => ({ message: \"十分帅\" }),\n};\n&lt;/script>\n&lt;style>\n.box-vue span {\n  color: red;\n}\n&lt;/style></span>\n<span>```</span></span>\n\n:::\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div></details>\n\n          <div\n            id=\"code-demo-2b9215d0\"\n           \n  \n data-title=\"%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%20Demo\"\n\n            data-code=\"%7B%22md%22%3A%22%23%20%E6%A0%87%E9%A2%98%5Cn%5Cn%E5%8D%81%E5%88%86%E5%B8%85%5Cn%22%2C%22ts%22%3A%22const%20message%3A%20string%20%3D%20%5C%22Mr.Hope%5C%22%3B%5Cn%5Cndocument.querySelector(%5C%22h1%5C%22).innerHTML%20%3D%20message%3B%5Cn%22%2C%22scss%22%3A%22h1%20%7B%5Cn%20%20font-style%3A%20italic%3B%5Cn%5Cn%20%20%2B%20p%20%7B%5Cn%20%20%20%20color%3A%20red%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%7D\"\n          >\n              <div>\n                \n              </div>\n              <div>\n                <div>\n<div><pre><code><span><span>#</span> 标题</span>\n\n十分帅\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>const</span> message<span>:</span> <span>string</span> <span>=</span> <span>\"Mr.Hope\"</span><span>;</span>\n\ndocument<span>.</span><span>querySelector</span><span>(</span><span>\"h1\"</span><span>)</span><span>.</span>innerHTML <span>=</span> message<span>;</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>h1 </span><span>{</span>\n  <span>font-style</span><span>:</span> italic<span>;</span>\n\n  <span>+ p </span><span>{</span>\n    <span>color</span><span>:</span> red<span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div>\n            </div>\n          </div>\n          \n        </div>\n<details><summary>代码</summary>\n<div><pre><code>::: demo 一个普通 Demo\n\n<span><span>```</span><span>md</span>\n<span><span><span>#</span> 标题</span>\n\n十分帅</span>\n<span>```</span></span>\n\n<span><span>```</span><span>ts</span>\n<span><span>const</span> message<span>:</span> <span>string</span> <span>=</span> <span>\"Mr.Hope\"</span><span>;</span>\n\ndocument<span>.</span><span>querySelector</span><span>(</span><span>\"h1\"</span><span>)</span><span>.</span>innerHTML <span>=</span> message<span>;</span></span>\n<span>```</span></span>\n\n<span><span>```</span><span>scss</span>\n<span><span>h1 </span><span>{</span>\n  <span>font-style</span><span>:</span> italic<span>;</span>\n\n  <span>+ p </span><span>{</span>\n    <span>color</span><span>:</span> red<span>;</span>\n  <span>}</span>\n<span>}</span></span>\n<span>```</span></span>\n\n:::\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div></details>\n<ul>\n<li><a href=\"https://vuepress-theme-hope.github.io/zh/guide/markdown/demo/\" target=\"_blank\" rel=\"noopener noreferrer\">点击查看</a></li>\n</ul>\n<h3 id=\"幻灯片\"> 幻灯片</h3>\n<i>Not supported content</i><details><summary>代码</summary>\n<div><pre><code>@slidestart\n\n<span><span>##</span> 幻灯片 1</span>\n\n一个有文字和 <span>[<span>链接</span>](<span>https://mrhope.site</span>)</span> 的段落\n\n<span>---</span>\n\n<span><span>##</span> 幻灯片 2</span>\n\n<span>-</span> 列表 1\n<span>-</span> 列表 2\n\n<span>---</span>\n\n<span><span>##</span> 幻灯片 3.1</span>\n\n<span><span>```</span><span>js</span>\n<span><span>const</span> a <span>=</span> <span>1</span><span>;</span></span>\n<span>```</span></span>\n\n--\n\n<span><span>##</span> 幻灯片 3.2</span>\n\n$$\nJ(\\theta_0,\\theta_1) = \\sum_{i=0}\n$$\n\n@slideend\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div></details>\n<ul>\n<li><a href=\"https://vuepress-theme-hope.github.io/zh/guide/markdown/presentation/\" target=\"_blank\" rel=\"noopener noreferrer\">点击查看</a></li>\n</ul>\n<h2 id=\"其他语法\"> 其他语法</h2>\n<div><p>自定义标题</p>\n<p>信息容器</p>\n</div>\n<div><p>自定义标题</p>\n<p>提示容器</p>\n</div>\n<div><p>自定义标题</p>\n<p>警告容器</p>\n</div>\n<div><p>自定义标题</p>\n<p>危险容器</p>\n</div>\n<details><summary>自定义标题</summary>\n<p>详情容器</p>\n</details>\n<details><summary>代码</summary>\n<div><pre><code>::: info 自定义标题\n\n信息容器\n\n:::\n\n::: tip 自定义标题\n\n提示容器\n\n:::\n\n::: warning 自定义标题\n\n警告容器\n\n:::\n\n::: danger 自定义标题\n\n危险容器\n\n:::\n\n::: details 自定义标题\n\n详情容器\n\n:::\n</code></pre>\n<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div></details>\n<hr>\n<section>\n<ol>\n<li id=\"footnote1\"><p>这是脚注内容 </p>\n</li>\n</ol>\n</section>\n",
      "date_published": "2021-06-03T11:56:08.000Z",
      "date_modified": "2021-06-03T11:56:08.000Z",
      "authors": [
        {
          "name": "jia-123"
        }
      ],
      "tags": [
        "使用指南"
      ]
    },
    {
      "title": "页面配置",
      "url": "https://jia-123.github.io/guide/page/",
      "id": "https://jia-123.github.io/guide/page/",
      "content_html": "<h2 id=\"页面信息\"> 页面信息</h2>\n<p>你可以在 Markdown 的 Frontmatter 中设置页面信息。</p>\n<ul>\n<li>\n<p>作者设置为 Ms.Hope。</p>\n</li>\n<li>\n<p>写作时间应为 2020 年 1 月 1 日</p>\n</li>\n<li>\n<p>分类为 “使用指南”</p>\n</li>\n<li>\n<p>标签为 “页面配置” 和 “使用指南”</p>\n</li>\n</ul>\n<h2 id=\"页面内容\"> 页面内容</h2>\n<p>你可以自由在这里书写你的 Markdown。</p>\n<div><p>提示</p>\n<ul>\n<li>\n<p>Markdown 文件夹的图片请使用相对链接 <code>./</code> 进行引用。</p>\n</li>\n<li>\n<p><code>.vuepress/public</code> 文件夹的图片，请使用绝对链接 <code>/</code> 进行引用</p>\n</li>\n</ul>\n</div>\n<p>主题包含了一个自定义徽章章可以使用:</p>\n<blockquote>\n<p>文字结尾应该有深蓝色的 徽章文字 徽章。 <i>Not supported content</i></p>\n</blockquote>\n<h2 id=\"页面结构\"> 页面结构</h2>\n<p>此页面应当包含：</p>\n<ul>\n<li>返回顶部按钮</li>\n<li>路径导航</li>\n<li>评论</li>\n<li>页脚</li>\n</ul>\n<div><p>jia</p>\n<p>hdfhjewqhnjfd</p>\n<p>dkffkdgnjnjkn</p>\n</div>\n",
      "date_published": "2020-01-01T00:00:00.000Z",
      "date_modified": "2021-06-03T11:56:08.000Z",
      "authors": [
        {
          "name": "Ms.Hope"
        }
      ],
      "tags": [
        "使用指南"
      ]
    },
    {
      "title": "主要功能与配置演示",
      "url": "https://jia-123.github.io/guide/",
      "id": "https://jia-123.github.io/guide/",
      "content_html": "<h1 id=\"主要功能与配置演示\"> 主要功能与配置演示</h1>\n<ul>\n<li>\n<p><a href=\"./page.html\">页面展示</a></p>\n</li>\n<li>\n<p><a href=\"./markdown.html\">Markdown 展示</a></p>\n</li>\n<li>\n<p><a href=\"./disable.html\">禁用展示</a></p>\n</li>\n<li>\n<p><a href=\"./encrypt.html\">加密展示</a></p>\n</li>\n</ul>\n",
      "date_published": "2021-06-03T11:56:08.000Z",
      "date_modified": "2021-06-03T11:56:08.000Z",
      "authors": [
        {
          "name": "jia-123"
        }
      ],
      "tags": [
        "使用指南"
      ]
    },
    {
      "title": "项目主页",
      "url": "https://jia-123.github.io/home/",
      "id": "https://jia-123.github.io/home/",
      "content_html": "<p>这是普通主页的案例。你可以在这里放置你的主体内容。</p>\n<p>配置项的相关说明请见 <a href=\"https://vuepress-theme-hope.github.io/zh/guide/layout/home/\" target=\"_blank\" rel=\"noopener noreferrer\">首页布局配置</a>。</p>\n",
      "date_published": "2021-06-03T11:56:08.000Z",
      "date_modified": "2021-06-03T11:56:08.000Z",
      "authors": [
        {
          "name": "jia-123"
        }
      ],
      "tags": []
    },
    {
      "title": "自定义布局",
      "url": "https://jia-123.github.io/layout/",
      "id": "https://jia-123.github.io/layout/",
      "content_html": "<template #page-top><p>页面顶部内容</p>\n</template><template #page-bottom><p>页面底部内容</p>\n</template><template #content-top><p>内容顶部内容</p>\n</template><template #content-bottom><p>内容底部内容</p>\n</template><template #navbar-start><p>导航栏起始内容</p>\n</template><template #navbar-center><p>导航栏中部内容</p>\n</template><template #navbar-end><p>导航栏末尾内容</p>\n</template><template #sidebar-top><p>侧边栏顶部内容</p>\n</template><template #sidebar-center><p>侧边栏中部内容</p>\n</template><template #sidebar-bottom><p>侧边栏底部内容</p>\n</template><p>页面内容</p>\n",
      "date_published": "2021-06-03T11:56:08.000Z",
      "date_modified": "2021-06-03T11:56:08.000Z",
      "authors": [
        {
          "name": "jia-123"
        }
      ],
      "tags": []
    },
    {
      "title": "博客主页",
      "url": "https://jia-123.github.io/",
      "id": "https://jia-123.github.io/",
      "content_html": "<p>相关配置文档请见 <a href=\"https://vuepress-theme-hope.github.io/zh/guide/layout/blog/\" target=\"_blank\" rel=\"noopener noreferrer\">博客主页</a></p>\n",
      "date_published": "2021-06-03T11:56:08.000Z",
      "date_modified": "2021-06-03T11:56:08.000Z",
      "authors": [
        {
          "name": "jia-123"
        }
      ],
      "tags": []
    },
    {
      "title": "幻灯片页",
      "url": "https://jia-123.github.io/slides/",
      "id": "https://jia-123.github.io/slides/",
      "content_html": "\n<i>Not supported content</i>",
      "image": "https://jia-123.github.io/logo.svg",
      "date_published": "2021-06-03T11:56:08.000Z",
      "date_modified": "2021-06-03T11:56:08.000Z",
      "authors": [
        {
          "name": "jia-123"
        }
      ],
      "tags": []
    }
  ]
}